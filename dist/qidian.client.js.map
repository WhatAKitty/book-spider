{"version":3,"sources":["../src/qidian.client.js"],"names":["rest","contentType","dataType","machineid","machine__","createHeader","size","width","height","type","osversion","device","token","Buffer","toString","qdheader","Math","floor","random","Qidian","recommends","GET","urls","recommend","rCount","rdm","sId","data","err","Result","Message","CoverList","Group","searchBooks","params","channel","firstEntry","order","pageIndex","key","search","action","p","update","vipBoutiqueSignstatus","Data","bookInfo","bookId","iosDeviceType","info","BookId","isOutBook","preview","headers","chapters","requestSource","timeStamp","comments","ReviewType"],"mappings":"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","file":"qidian.client.js","sourcesContent":["\nimport Rest from 'react-rest-kit';\nimport { config } from './config';\n\nconst rest = new Rest({\n  contentType: 'application/json',\n  dataType: 'json',\n});\n\n// 需要根据设备ID进行改造\n// 之后计划将两者ID在设备中创建并传递给服务端进行转发请求\nconst machineid = '1bc908e0c5c890a263748aaaedd30a9a';\nconst machine__ = '4b841f8d-ad56-4bf8-ba6f-4fd47c502fb2';\n\nconst createHeader = ({\n  size = '4.7.0',\n  width = 750,\n  height = 1334,\n  type = 'AppStore',\n  osversion = '10.30',\n  device = 'iOS/iPhone/iPhone8,1',\n  token = '1507347832421',\n}) => {\n  return new Buffer(`${machineid}|${size}|${width}|${height}|${type}|${osversion}|5|${device}|199|${type}|3|-999|${token}|0|${machine__}`).toString('base64');\n}\n\nlet qdheader = createHeader({ token: Math.floor(Math.random() * 100000000000) });\n\nconst Qidian = {\n  async recommends() {\n    const { data, err } = await rest.GET(config.urls.recommend, {\n      rCount: 4,\n      rdm: 1507298003,\n      sId: 0,\n    });\n\n    if (err) {\n      // 返回错误\n      return { err };\n    }\n\n    if (data.Result !== 0) {\n      // 起点返回错误\n      return { err: data.Message };\n    }\n\n    return {\n      data: {\n        CoverList: data.CoverList,\n        Group: data.Group,\n      }\n    };\n  },\n  async searchBooks(params = {}) {\n    const { channel = -1, firstEntry = 1, order = -1, pageIndex = 1, size = -1, key = '' } = params;\n    const { data, err } = await rest.GET(config.urls.search, {\n      key,\n      action: -1,\n      channel,\n      firstEntry,\n      order,\n      p: 'all',\n      pageIndex,\n      size,\n      type: 0,\n      update: -1,\n      vipBoutiqueSignstatus: '-1a-1a-1',\n    });\n\n    if (err) {\n      // 返回错误\n      return { err };\n    }\n\n    if (data.Result !== 0) {\n      // 起点返回错误\n      return { err: data.Message };\n    }\n\n    return { data: data.Data };\n  },\n  async bookInfo(params = {}) {\n    const { bookId, iosDeviceType = 0 } = params;\n    const { data, err } = await rest.GET(config.urls.info, {\n      BookId: bookId,\n      iosDeviceType,\n      isOutBook: 0,\n      preview: 0,\n    }, {\n        headers: {\n          'qdheader': qdheader,\n        },\n      });\n\n    if (err) {\n      // 返回错误\n      return { err };\n    }\n\n    if (data.Result !== 0) {\n      // 起点返回错误\n      return { err: data.Message };\n    }\n\n    return { data: data.Data };\n  },\n  async chapters(params = {}) {\n    const { bookId, pageIndex = -1 } = params;\n    const { data, err } = await rest.GET(config.urls.chapters, {\n      bookId,\n      pageIndex,\n      requestSource: 0,\n      timeStamp: 0,\n    }, {\n        headers: {\n          'qdheader': qdheader,\n        },\n      });\n\n    if (err) {\n      // 返回错误\n      return { err };\n    }\n\n    if (data.Result !== 0) {\n      // 起点返回错误\n      return { err: data.Message };\n    }\n\n    return { data: data.Data };\n  },\n  async comments(params = {}) {\n    const { bookId, pageIndex = 1 } = params;\n    const { data, err } = await rest.GET(config.urls.comments, {\n      ReviewType: 112,\n      bookId,\n      pageIndex,\n    }, {\n        headers: {\n          'qdheader': qdheader,\n        },\n      });\n\n    if (err) {\n      // 返回错误\n      return { err };\n    }\n\n    if (data.Result !== 0) {\n      // 起点返回错误\n      return { err: data.Message };\n    }\n\n    return { data: data.Data };\n  },\n}\n\nexport default Qidian;\n"]}