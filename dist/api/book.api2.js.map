{"version":3,"sources":["../../src/api/book.api2.js"],"names":["BookApi","prefix","cachedRecommends","get","ctx","next","date","Date","key","getFullYear","getMonth","getDay","status","body","recommends","data","err","msg","Promise","all","CoverList","map","raw","qidianBookId","ActionUrl","substring","length","bookInfoHtml","bookId","qidianBookHtml","qidianErr","console","error","htmlStart","indexOf","htmlEnd","$","load","bookName","text","searchBooks","zhuishuBooks","zhuishuErr","log","title","_id","pic","Pic","covers","Group","Title","Subtitle","Data","rawBook","BookName","author","Author","cover","BookId","majorCate","CategoryName","minorCate","undefined","shortIntro","Description","lastChapter","LastVipUpdateChapterName","LastUpdateChapterName","subTitle","books","groups","result","query","bookInfo","params","newestChapter","bookIds","chapters","chaptersBySource","sourceId","link","parsed","Buffer","replace","toString","content","encodeURIComponent","comments","pageIndex"],"mappings":"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","file":"book.api2.js","sourcesContent":["\nimport Router from 'koa-router';\nimport ZhuishuClient from '../zhuishu.client';\nimport QidianClient from '../qidian.client';\nimport parserFactory from '../core/parser';\nimport cheerio from 'cheerio';\n\nconst BookApi = new Router({\n  prefix: '/api/v2/books',\n});\n\n/**\n * @swagger\n * definitions:\n *   BAD404:\n *     type: object\n *     properties:\n *       msg:\n *         type: object\n *   Book:\n *     type: object\n *     properties:\n *       _id:\n *         type: string\n *       title:\n *         type: string\n *       author:\n *         type: string\n *       longIntro:\n *         type: string\n *       conver:\n *         type: string\n *       creater:\n *         type: number\n *       majorCate:\n *         type: string\n *       minorCate:\n *         type: string\n *       rating:\n *         type: object\n *         properties:\n *           count:\n *             type: number,\n *           score:\n *             type: number,\n *           isEffect:\n *             type: boolean,\n *       hasCopyright:\n *         type: boolean\n *       updated:\n *         type: string\n *       chaptersCount:\n *         type: number\n *       lastChapter:\n *         type: string\n *       gender:\n *         type: array\n *       tags:\n *         type: array\n *       cat:\n *         type: string\n *   Recommends:\n *     type: array\n *     items:\n *       $ref: '#/definitions/Book'\n *   Chapter:\n *     type: object\n *     properties:\n *       c:\n *         type: number\n *       n:\n *         type: string\n *       ov:\n *         type: number\n *       p:\n *         type: number\n *       t:\n *         type: number\n *       w:\n *         type: number\n *       vc:\n *         type: string\n *       ui:\n *         type: number\n *       ccs:\n *         type: number\n *       cci:\n *         type: number\n *   ChapterResp:\n *     type: object\n *     properties:\n *       BookId:\n *         type: number\n *       BookName:\n *         type: string\n *       AuthorId:\n *         type: number\n *       AuthorName:\n *         type: string\n *       Author:\n *         type: string\n *       CategoryId:\n *         type: number\n *       CategoryName:\n *         type: string\n *       ImageStatus:\n *         type: number\n *       LastUpdateChapterID:\n *         type: number\n *       LastUpdateChapterName:\n *         type: string\n *       LastChapterUpdateTime:\n *         type: number\n *       LastVipUpdateChapterId:\n *         type: number\n *       LastVipUpdateChapterName:\n *         type: string\n *       LastVipChapterUpdateTime:\n *         type: number\n *       IsVip:\n *         type: number\n *       BookStatus:\n *         type: number\n *       WordsCount:\n *         type: number\n *       Label:\n *         type: string\n *       IsQin:\n *         type: number\n *       Chapters:\n *         type: array\n *         items:\n *           $ref: '#/definitions/Chapter'\n *       IsReload:\n *         type: number\n *       DeletedChapters:\n *         type: string\n *       Volumes:\n *         type: array\n *         items:\n *           type: object\n *           properties:\n *             VolumeCode:\n *               type: string\n *             VolumeName:\n *               type: string\n *       EnableBookUnitLease:\n *         type: number\n *       EnableBookUnitBuy:\n *         type: number\n *       Units:\n *         type: string\n *       WholeSale:\n *         type: number\n *       TotalPrice:\n *         type: number\n *   Comment:\n *     type: object\n *     properties:\n *       RankName:\n *         type: string \n *       Id:\n *         type: number\n *       ViewCount:\n *         type: number\n *       PostCount:\n *         type: number\n *       Subject:\n *         type: string\n *       UserName:\n *         type: string\n *       UserId:\n *         type: number\n *       PostDate:\n *         type: long\n *       Body:\n *         type: string\n *       Type:\n *         type: number\n *       VoteYes:\n *         type: number\n *       VoteAgainst:\n *         type: number\n *       UserHeadIcon:\n *         type: string\n *       From:\n *         type: string\n */\n\n/**\n * @swagger\n * /api/v2/books/recommends:\n *   get:\n *     description: 推荐书籍\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: gender\n *         description: 分类（'male', 'female', 'press'）\n *         in: query\n *         required: true\n *         type: string\n *       - name: start\n *         description: 开始索引\n *         in: query\n *         required: false\n *         type: integer\n *       - name: limit\n *         description: 总查询条数\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取书籍推荐\n *         schema:\n *           $ref: '#/definitions/Recommends'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n *         \n */\nconst cachedRecommends = {};\nBookApi.get('/recommends', async (ctx, next) => {\n  const date = new Date();\n  const key = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}`;\n  if (cachedRecommends[key]) {\n    ctx.status = 200;\n    ctx.body = cachedRecommends[key];\n    return;\n  }\n\n  const { data, err } = await QidianClient.recommends();\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  // wrap covers\n  const covers = await Promise.all(data.CoverList.map(async raw => {\n    const qidianBookId = raw.ActionUrl.substring('QDReader://ShowBook/'.length, raw.ActionUrl.length);\n    const { data: qidianBookHtml, err: qidianErr } = await QidianClient.bookInfoHtml({ bookId: qidianBookId });\n    if (qidianErr) {\n      console.error(`封面搜索图书 ${qidianBookId} 失败`, err);\n      return {};\n    }\n    // get bookName\n    const htmlStart = qidianBookHtml.indexOf('<body>');\n    const htmlEnd = qidianBookHtml.indexOf('</body>');\n    const $ = cheerio.load(qidianBookHtml.substring(htmlStart, htmlEnd + 7));\n    const bookName = $(`a[href=\"//book.qidian.com/info/${qidianBookId}\"]`).text();\n    const { data: zhuishuBooks, err: zhuishuErr } = await ZhuishuClient.searchBooks({\n      key: bookName,\n    });\n    if (zhuishuErr) {\n      console.error(`封面搜索图书 ${bookName} 失败`, err);\n      return {};\n    }\n\n    console.log(`封面搜索到图书 ${zhuishuBooks[0].title}`);\n    return {\n      _id: `${zhuishuBooks[0]._id}`,\n      pic: raw.Pic,\n    };\n  }));\n\n  // wrap groups\n  const groups = await Promise.all(data.Group.map(async raw => {\n    return {\n      title: raw.Title,\n      subTitle: raw.Subtitle,\n      books: await Promise.all(raw.Data.map(async rawBook => {\n        const { data: zhuishuBooks, err: zhuishuErr } = await ZhuishuClient.searchBooks({\n          key: rawBook.BookName,\n        });\n        if (zhuishuErr) {\n          console.error(`搜索图书 ${rawBook.BookName} 失败`, err);\n          return {};\n        }\n\n        console.log(`搜索到图书 ${zhuishuBooks[0].title}`);\n        return {\n          _id: `${zhuishuBooks[0]._id}`,\n          title: rawBook.BookName,\n          author: rawBook.Author,\n          cover: `https://qidian.qpic.cn/qdbimg/349573/${rawBook.BookId}/180`,\n          majorCate: rawBook.CategoryName,\n          minorCate: undefined,\n          shortIntro: rawBook.Description,\n          lastChapter: rawBook.LastVipUpdateChapterName || rawBook.LastUpdateChapterName,\n        };\n      })),\n    };\n  }));\n\n  const result = {\n    covers,\n    groups,\n  };\n\n  cachedRecommends[key] = result;\n\n  ctx.status = 200;\n  ctx.body = result;\n});\n\n/**\n * @swagger\n * /api/v2/books:\n *   get:\n *     description: 图书查询\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: key\n *         description: 关键字\n *         in: query\n *         required: false\n *         type: string\n *     responses:\n *       200:\n *         description: 成功搜索到书籍\n *         schema:\n *           type: array\n *           items:\n *             $ref: '#/definitions/Book'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n *         \n */\nBookApi.get('/', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.searchBooks(ctx.query);\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data || [];\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 图书详情接口\n *     produces:\n *       - application/json\n *     responses:\n *       200:\n *         description: 成功获取书籍详情\n *         schema:\n *           $ref: '#/definitions/Book'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'      \n */\nBookApi.get('/:bookId', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.bookInfo({\n    bookId: ctx.params.bookId,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}/chapters/newest:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 最新图书章节列表\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取书籍详情\n *         schema:\n *           $ref: '#/definitions/ChapterResp'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/chapters/newest', async (ctx, next) => {\n  // 通过起点获取最新章节\n  const { data, err } = await ZhuishuClient.newestChapter({\n    bookIds: [ctx.params.bookId],\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data[ctx.params.bookId];\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}/chapters:\n *   parameters:\n *     - name: source\n *       description: 源站编号\n *       in: path\n *       required: true\n *       type: string\n *       enum:\n *         - qbg\n *         - ybdu\n *       x-example: qbg\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 源站图书章节列表\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取图书章节列表\n *         schema:\n *           type: array\n *           items:\n *             type: object\n *             properties:\n *               chapterId:\n *                 type: string\n *               title:\n *                 type: stirng\n *       400:\n *         description: 无法获取图书章节列表\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/chapters', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.chapters({\n    bookId: ctx.params.bookId,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/{sourceId}/chapters:\n *   get:\n *     description: 某个小说源的章节内容\n *     produces:\n *       - application/json\n */\nBookApi.get('/:sourceId/chapters', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.chaptersBySource({\n    sourceId: ctx.params.sourceId,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/chapter/{link}:\n *   parameters:\n *     - name: source\n *       description: 源站编号\n *       in: path\n *       required: true\n *       type: string\n *       enum:\n *         - qbg\n *         - ybdu\n *       x-example: qbg\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *     - name: chapterId\n *       description: 章节编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 112\n *   get:\n *     description: 源站章节内容\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取图书章节内容\n *         schema:\n *           type: object\n *           properties:\n *             content:\n *               type: string\n *             title:\n *               type: string\n *       400:\n *         description: 无法获取图书章节内容\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/chapter/:link', async (ctx, next) => {\n  const raw = ctx.params.link;\n  const parsed = new Buffer(raw.replace('xiegang', '/'), 'base64').toString();\n  const { data, err } = await ZhuishuClient.content({\n    link: encodeURIComponent(parsed),\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}/comments:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 图书书评列表\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: pageIndex\n *         description: 开始索引\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取图书书评\n *         schema:\n *           type: array\n *           items:\n *             $ref: '#/definitions/Comment'\n *       400:\n *         description: 无法获取图书书评\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/comments', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.comments({\n    bookId: ctx.params.bookId,\n    pageIndex: ctx.query.pageIndex,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\nexport default BookApi;\n\n"]}