{"version":3,"sources":["../../src/api/book.api2.js"],"names":["BookApi","prefix","get","ctx","next","recommends","query","data","err","status","body","msg","searchBooks","bookInfo","bookId","params","newestChapter","bookIds","chapters","chaptersBySource","sourceId","content","link","comments","pageIndex"],"mappings":"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","file":"book.api2.js","sourcesContent":["\nimport Router from 'koa-router';\nimport ZhuishuClient from '../zhuishu.client';\nimport parserFactory from '../core/parser';\n\nconst BookApi = new Router({\n  prefix: '/api/v2/books',\n});\n\n/**\n * @swagger\n * definitions:\n *   BAD404:\n *     type: object\n *     properties:\n *       msg:\n *         type: object\n *   Book:\n *     type: object\n *     properties:\n *       _id:\n *         type: string\n *       title:\n *         type: string\n *       author:\n *         type: string\n *       longIntro:\n *         type: string\n *       conver:\n *         type: string\n *       creater:\n *         type: number\n *       majorCate:\n *         type: string\n *       minorCate:\n *         type: string\n *       rating:\n *         type: object\n *         properties:\n *           count:\n *             type: number,\n *           score:\n *             type: number,\n *           isEffect:\n *             type: boolean,\n *       hasCopyright:\n *         type: boolean\n *       updated:\n *         type: string\n *       chaptersCount:\n *         type: number\n *       lastChapter:\n *         type: string\n *       gender:\n *         type: array\n *       tags:\n *         type: array\n *       cat:\n *         type: string\n *   Recommends:\n *     type: array\n *     items:\n *       $ref: '#/definitions/Book'\n *   Chapter:\n *     type: object\n *     properties:\n *       c:\n *         type: number\n *       n:\n *         type: string\n *       ov:\n *         type: number\n *       p:\n *         type: number\n *       t:\n *         type: number\n *       w:\n *         type: number\n *       vc:\n *         type: string\n *       ui:\n *         type: number\n *       ccs:\n *         type: number\n *       cci:\n *         type: number\n *   ChapterResp:\n *     type: object\n *     properties:\n *       BookId:\n *         type: number\n *       BookName:\n *         type: string\n *       AuthorId:\n *         type: number\n *       AuthorName:\n *         type: string\n *       Author:\n *         type: string\n *       CategoryId:\n *         type: number\n *       CategoryName:\n *         type: string\n *       ImageStatus:\n *         type: number\n *       LastUpdateChapterID:\n *         type: number\n *       LastUpdateChapterName:\n *         type: string\n *       LastChapterUpdateTime:\n *         type: number\n *       LastVipUpdateChapterId:\n *         type: number\n *       LastVipUpdateChapterName:\n *         type: string\n *       LastVipChapterUpdateTime:\n *         type: number\n *       IsVip:\n *         type: number\n *       BookStatus:\n *         type: number\n *       WordsCount:\n *         type: number\n *       Label:\n *         type: string\n *       IsQin:\n *         type: number\n *       Chapters:\n *         type: array\n *         items:\n *           $ref: '#/definitions/Chapter'\n *       IsReload:\n *         type: number\n *       DeletedChapters:\n *         type: string\n *       Volumes:\n *         type: array\n *         items:\n *           type: object\n *           properties:\n *             VolumeCode:\n *               type: string\n *             VolumeName:\n *               type: string\n *       EnableBookUnitLease:\n *         type: number\n *       EnableBookUnitBuy:\n *         type: number\n *       Units:\n *         type: string\n *       WholeSale:\n *         type: number\n *       TotalPrice:\n *         type: number\n *   Comment:\n *     type: object\n *     properties:\n *       RankName:\n *         type: string \n *       Id:\n *         type: number\n *       ViewCount:\n *         type: number\n *       PostCount:\n *         type: number\n *       Subject:\n *         type: string\n *       UserName:\n *         type: string\n *       UserId:\n *         type: number\n *       PostDate:\n *         type: long\n *       Body:\n *         type: string\n *       Type:\n *         type: number\n *       VoteYes:\n *         type: number\n *       VoteAgainst:\n *         type: number\n *       UserHeadIcon:\n *         type: string\n *       From:\n *         type: string\n */\n\n/**\n * @swagger\n * /api/v2/books/recommends:\n *   get:\n *     description: 推荐书籍\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: gender\n *         description: 分类（'male', 'female', 'press'）\n *         in: query\n *         required: true\n *         type: string\n *       - name: start\n *         description: 开始索引\n *         in: query\n *         required: false\n *         type: integer\n *       - name: limit\n *         description: 总查询条数\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取书籍推荐\n *         schema:\n *           $ref: '#/definitions/Recommends'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n *         \n */\nBookApi.get('/recommends', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.recommends(ctx.query)\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books:\n *   get:\n *     description: 图书查询\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: key\n *         description: 关键字\n *         in: query\n *         required: false\n *         type: string\n *     responses:\n *       200:\n *         description: 成功搜索到书籍\n *         schema:\n *           type: array\n *           items:\n *             $ref: '#/definitions/Book'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n *         \n */\nBookApi.get('/', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.searchBooks(ctx.query);\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data || [];\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 图书详情接口\n *     produces:\n *       - application/json\n *     responses:\n *       200:\n *         description: 成功获取书籍详情\n *         schema:\n *           $ref: '#/definitions/Book'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'      \n */\nBookApi.get('/:bookId', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.bookInfo({\n    bookId: ctx.params.bookId,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}/chapters/newest:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 最新图书章节列表\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取书籍详情\n *         schema:\n *           $ref: '#/definitions/ChapterResp'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/chapters/newest', async (ctx, next) => {\n  // 通过起点获取最新章节\n  const { data, err } = await ZhuishuClient.newestChapter({\n    bookIds: [ctx.params.bookId],\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data[ctx.params.bookId];\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}/chapters:\n *   parameters:\n *     - name: source\n *       description: 源站编号\n *       in: path\n *       required: true\n *       type: string\n *       enum:\n *         - qbg\n *         - ybdu\n *       x-example: qbg\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 源站图书章节列表\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取图书章节列表\n *         schema:\n *           type: array\n *           items:\n *             type: object\n *             properties:\n *               chapterId:\n *                 type: string\n *               title:\n *                 type: stirng\n *       400:\n *         description: 无法获取图书章节列表\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/chapters', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.chapters({\n    bookId: ctx.params.bookId,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/{sourceId}/chapters:\n *   get:\n *     description: 某个小说源的章节内容\n *     produces:\n *       - application/json\n */\nBookApi.get('/:sourceId/chapters', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.chaptersBySource({\n    sourceId: ctx.params.sourceId,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/chapter/{link}:\n *   parameters:\n *     - name: source\n *       description: 源站编号\n *       in: path\n *       required: true\n *       type: string\n *       enum:\n *         - qbg\n *         - ybdu\n *       x-example: qbg\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *     - name: chapterId\n *       description: 章节编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 112\n *   get:\n *     description: 源站章节内容\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取图书章节内容\n *         schema:\n *           type: object\n *           properties:\n *             content:\n *               type: string\n *             title:\n *               type: string\n *       400:\n *         description: 无法获取图书章节内容\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/chapter/:link', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.content({\n    link: ctx.params.link,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v2/books/{bookId}/comments:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 图书书评列表\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: pageIndex\n *         description: 开始索引\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取图书书评\n *         schema:\n *           type: array\n *           items:\n *             $ref: '#/definitions/Comment'\n *       400:\n *         description: 无法获取图书书评\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/comments', async (ctx, next) => {\n  const { data, err } = await ZhuishuClient.comments({\n    bookId: ctx.params.bookId,\n    pageIndex: ctx.query.pageIndex,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\nexport default BookApi;\n\n"]}