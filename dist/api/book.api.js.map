{"version":3,"sources":["../../src/api/book.api.js"],"names":["BookApi","prefix","get","ctx","next","recommends","query","data","err","status","body","msg","searchBooks","bookInfo","bookId","params","iosDeviceType","chapters","pageIndex","source","findChapters","map","chapterId","chapter","title","syncContent","comments"],"mappings":";AACA,uC;AACA,0C;AACA,wC;;AAEA,IAAMA,UAAU,wBAAW;AACzBC,UAAQ,eADiB,EAAX,CAAhB;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA;;;;;;;;;;;;;;;;;;;AAmBAD,QAAQE,GAAR,CAAY,aAAZ,mGAA2B,iBAAOC,GAAP,EAAYC,IAAZ;AACG,+BAAaC,UAAb,CAAwBF,IAAIG,KAA5B,CADH,+BACjBC,IADiB,SACjBA,IADiB,CACXC,GADW,SACXA,GADW;;AAGrBA,eAHqB;AAIvBL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,mBAAKH,GADI,EAAX,CALuB;;;;;AAWzBL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAWH,IAAX,CAZyB,oEAA3B;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDAP,QAAQE,GAAR,CAAY,GAAZ,oGAAiB,kBAAOC,GAAP,EAAYC,IAAZ;AACa,+BAAaQ,WAAb,CAAyBT,IAAIG,KAA7B,CADb,gCACPC,IADO,SACPA,IADO,CACDC,GADC,SACDA,GADC;;AAGXA,eAHW;AAIbL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,mBAAKH,GADI,EAAX,CALa;;;;;AAWfL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAWH,QAAQ,EAAnB,CAZe,sEAAjB;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAP,QAAQE,GAAR,CAAY,UAAZ,oGAAwB,kBAAOC,GAAP,EAAYC,IAAZ;AACM,+BAAaS,QAAb,CAAsB;AAChDC,wBAAQX,IAAIY,MAAJ,CAAWD,MAD6B;AAEhDE,+BAAeb,IAAIG,KAAJ,CAAUU,aAFuB,EAAtB,CADN,gCACdT,IADc,SACdA,IADc,CACRC,GADQ,SACRA,GADQ;;;AAMlBA,eANkB;AAOpBL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,mBAAKH,GADI,EAAX,CARoB;;;;;AActBL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAWH,IAAX,CAfsB,sEAAxB;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAP,QAAQE,GAAR,CAAY,0BAAZ,oGAAwC,kBAAOC,GAAP,EAAYC,IAAZ;;AAEV,+BAAaa,QAAb,CAAsB;AAChDH,wBAAQX,IAAIY,MAAJ,CAAWD,MAD6B;AAEhDI,2BAAWf,IAAIG,KAAJ,CAAUY,SAF2B,EAAtB,CAFU,gCAE9BX,IAF8B,SAE9BA,IAF8B,CAExBC,GAFwB,SAExBA,GAFwB;;;AAOlCA,eAPkC;AAQpCL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,mBAAKH,GADI,EAAX,CAToC;;;;;AAetCL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAWH,IAAX,CAhBsC,sEAAxC;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCAP,QAAQE,GAAR,CAAY,2BAAZ,oGAAyC,kBAAOC,GAAP,EAAYC,IAAZ;;;AAGd,oCAAcD,IAAIY,MAAJ,CAAWI,MAAzB,EAAiCC,YAAjC,CAA8C,EAAEN,QAAQX,IAAIY,MAAJ,CAAWD,MAArB,EAA9C,CAHc,SAG/BG,QAH+B;;AAKrCd,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAWO,SAASI,GAAT,CAAa,2BAAY;AAClCC,2BAAWC,QAAQD,SADe;AAElCE,uBAAOD,QAAQC,KAFmB,EAAZ,EAAb,CAAX,CANqC;;;AAWrCrB,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,+BADS,EAAX,CAZqC,gFAAzC;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CAX,QAAQE,GAAR,CAAY,6BAAZ,qGAA2C,kBAAOC,GAAP,EAAYC,IAAZ;;AAEjB,oCAAcD,IAAIY,MAAJ,CAAWI,MAAzB,EAAiCM,WAAjC,CAA6C,EAAEX,QAAQX,IAAIY,MAAJ,CAAWD,MAArB,EAA6BQ,WAAWnB,IAAIY,MAAJ,CAAWO,SAAnD,EAA7C,CAFiB,SAEjCC,OAFiC;;AAIvCpB,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ;AACKa,mBADL,EALuC;;;AASvCpB,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,+BADS,EAAX,CAVuC,gFAA3C;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAX,QAAQE,GAAR,CAAY,mBAAZ,qGAAiC,kBAAOC,GAAP,EAAYC,IAAZ;AACH,+BAAasB,QAAb,CAAsB;AAChDZ,wBAAQX,IAAIY,MAAJ,CAAWD,MAD6B;AAEhDI,2BAAWf,IAAIG,KAAJ,CAAUY,SAF2B,EAAtB,CADG,iCACvBX,IADuB,UACvBA,IADuB,CACjBC,GADiB,UACjBA,GADiB;;;AAM3BA,eAN2B;AAO7BL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAW;AACTC,mBAAKH,GADI,EAAX,CAR6B;;;;;AAc/BL,gBAAIM,MAAJ,GAAa,GAAb;AACAN,gBAAIO,IAAJ,GAAWH,IAAX,CAf+B,sEAAjC;;;AAkBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEeP,O","file":"book.api.js","sourcesContent":["\nimport Router from 'koa-router';\nimport QidianClient from '../qidian.client';\nimport parserFactory from '../core/parser';\n\nconst BookApi = new Router({\n  prefix: '/api/v1/books',\n});\n\n/**\n * @swagger\n * definitions:\n *   BAD404:\n *     type: object\n *     properties:\n *       msg:\n *         type: object\n *   Book:\n *     type: object\n *     properties:\n *       BookId:\n *         type: number\n *       BookName:\n *         type: string\n *       AuthorId:\n *         type: number\n *       AuthorName:\n *         type: string\n *       Author:\n *         type: string\n *       CategoryId:\n *         type: number\n *       CategoryName:\n *         type: string\n *       ImageStatus:\n *         type: number\n *       LastUpdateChapterID:\n *         type: number\n *       LastUpdateChapterName:\n *         type: string\n *       LastChapterUpdateTime:\n *         type: number\n *       LastVipUpdateChapterId:\n *         type: number\n *       LastVipUpdateChapterName:\n *         type: string\n *       LastVipChapterUpdateTime:\n *         type: number\n *       IsVip:\n *         type: number\n *       BookStatus:\n *         type: number\n *       WordsCount:\n *         type: number\n *       Label:\n *         type: string\n *       IsQin:\n *         type: number\n *       BssReadTotal:\n *         type: number\n *       BssRecomTotal:\n *         type: number\n *       Price:\n *         type: number\n *       NewPrice:\n *         type: number\n *       Recommendation:\n *         type: string\n *       RecommenId:\n *         type: number\n *       GroupName:\n *         type: string\n *       ReadingType:\n *         type: number\n *       AlgInfo:\n *         type: string\n *       PartCount:\n *         type: number\n *       SourceBookId:\n *         type: number\n *       BookPartInfo:\n *         type: string\n *       ChargeType:\n *         type: number\n *       TotalPrice:\n *         type: number\n *       Description:\n *         type: string\n *   GroupItem:\n *     type: object\n *     properties:\n *       Title:\n *         type: string\n *       Subtitle:\n *         type: string\n *       ActionUrl:\n *         type: string\n *       Direction:\n *         type: string\n *       UpdateDesc:\n *         type: string\n *       Data:\n *         type: array\n *         items:\n *           $ref: '#/definitions/Book'\n *   Cover:\n *     type: object\n *     properties:\n *       Pic:\n *         type: string\n *       ActionUrl:\n *         type: string\n *   Recommends:\n *     type: object\n *     properties:\n *       CoverList:\n *         type: array\n *         items:\n *           $ref: '#/definitions/Cover'\n *       Group:\n *         type: array\n *         items:\n *           $ref: '#/definitions/GroupItem'\n *   Chapter:\n *     type: object\n *     properties:\n *       c:\n *         type: number\n *       n:\n *         type: string\n *       ov:\n *         type: number\n *       p:\n *         type: number\n *       t:\n *         type: number\n *       w:\n *         type: number\n *       vc:\n *         type: string\n *       ui:\n *         type: number\n *       ccs:\n *         type: number\n *       cci:\n *         type: number\n *   ChapterResp:\n *     type: object\n *     properties:\n *       BookId:\n *         type: number\n *       BookName:\n *         type: string\n *       AuthorId:\n *         type: number\n *       AuthorName:\n *         type: string\n *       Author:\n *         type: string\n *       CategoryId:\n *         type: number\n *       CategoryName:\n *         type: string\n *       ImageStatus:\n *         type: number\n *       LastUpdateChapterID:\n *         type: number\n *       LastUpdateChapterName:\n *         type: string\n *       LastChapterUpdateTime:\n *         type: number\n *       LastVipUpdateChapterId:\n *         type: number\n *       LastVipUpdateChapterName:\n *         type: string\n *       LastVipChapterUpdateTime:\n *         type: number\n *       IsVip:\n *         type: number\n *       BookStatus:\n *         type: number\n *       WordsCount:\n *         type: number\n *       Label:\n *         type: string\n *       IsQin:\n *         type: number\n *       Chapters:\n *         type: array\n *         items:\n *           $ref: '#/definitions/Chapter'\n *       IsReload:\n *         type: number\n *       DeletedChapters:\n *         type: string\n *       Volumes:\n *         type: array\n *         items:\n *           type: object\n *           properties:\n *             VolumeCode:\n *               type: string\n *             VolumeName:\n *               type: string\n *       EnableBookUnitLease:\n *         type: number\n *       EnableBookUnitBuy:\n *         type: number\n *       Units:\n *         type: string\n *       WholeSale:\n *         type: number\n *       TotalPrice:\n *         type: number\n *   Comment:\n *     type: object\n *     properties:\n *       RankName:\n *         type: string \n *       Id:\n *         type: number\n *       ViewCount:\n *         type: number\n *       PostCount:\n *         type: number\n *       Subject:\n *         type: string\n *       UserName:\n *         type: string\n *       UserId:\n *         type: number\n *       PostDate:\n *         type: long\n *       Body:\n *         type: string\n *       Type:\n *         type: number\n *       VoteYes:\n *         type: number\n *       VoteAgainst:\n *         type: number\n *       UserHeadIcon:\n *         type: string\n *       From:\n *         type: string\n */\n\n/**\n * @swagger\n * /api/v1/books/recommends:\n *   get:\n *     description: 推荐书籍\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取书籍推荐\n *         schema:\n *           $ref: '#/definitions/Recommends'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n *         \n */\nBookApi.get('/recommends', async (ctx, next) => {\n  const { data, err } = await QidianClient.recommends(ctx.query);\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v1/books:\n *   get:\n *     description: 图书查询\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: key\n *         description: 关键字\n *         in: query\n *         required: false\n *         type: string\n *       - name: channel\n *         description: 图书来源渠道\n *         in: query\n *         required: false\n *         type: integer\n *       - name: firstEntry\n *         description: 图书来源渠道\n *         in: query\n *         required: false\n *         type: integer\n *       - name: order\n *         description: 查询排序\n *         in: query\n *         required: false\n *         type: integer\n *       - name: pageIndex\n *         description: 查询开始页索引\n *         in: query\n *         required: false\n *         type: integer\n *       - name: size\n *         description: 图书字数\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功搜索到书籍\n *         schema:\n *           type: array\n *           items:\n *             $ref: '#/definitions/Book'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n *         \n */\nBookApi.get('/', async (ctx, next) => {\n  const { data, err } = await QidianClient.searchBooks(ctx.query);\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data || [];\n});\n\n/**\n * @swagger\n * /api/v1/books/{bookId}:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 图书详情接口\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: iosDeviceType\n *         description: 是否IOS设备\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取书籍详情\n *         schema:\n *           $ref: '#/definitions/Book'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'      \n */\nBookApi.get('/:bookId', async (ctx, next) => {\n  const { data, err } = await QidianClient.bookInfo({\n    bookId: ctx.params.bookId,\n    iosDeviceType: ctx.query.iosDeviceType,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v1/books/{bookId}/chapters/newest:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 最新图书章节列表\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: iosDeviceType\n *         description: 是否IOS设备\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取书籍详情\n *         schema:\n *           $ref: '#/definitions/ChapterResp'\n *       400:\n *         description: 无法获取书籍推荐数据\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/chapters/newest', async (ctx, next) => {\n  // 通过起点获取最新章节\n  const { data, err } = await QidianClient.chapters({\n    bookId: ctx.params.bookId,\n    pageIndex: ctx.query.pageIndex,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n/**\n * @swagger\n * /api/v1/books/{source}/{bookId}/chapters:\n *   parameters:\n *     - name: source\n *       description: 源站编号\n *       in: path\n *       required: true\n *       type: string\n *       enum:\n *         - qbg\n *         - ybdu\n *       x-example: qbg\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 源站图书章节列表\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取图书章节列表\n *         schema:\n *           type: array\n *           items:\n *             type: object\n *             properties:\n *               chapterId:\n *                 type: string\n *               title:\n *                 type: stirng\n *       400:\n *         description: 无法获取图书章节列表\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:source/:bookId/chapters', async (ctx, next) => {\n  // 通过源站获取章节\n  try {\n    const chapters = await parserFactory(ctx.params.source).findChapters({ bookId: ctx.params.bookId });\n\n    ctx.status = 200;\n    ctx.body = chapters.map(chapter => ({\n      chapterId: chapter.chapterId,\n      title: chapter.title,\n    }));\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n  }\n});\n\n/**\n * @swagger\n * /api/v1/books/{source}/{bookId}/{chapterId}:\n *   parameters:\n *     - name: source\n *       description: 源站编号\n *       in: path\n *       required: true\n *       type: string\n *       enum:\n *         - qbg\n *         - ybdu\n *       x-example: qbg\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *     - name: chapterId\n *       description: 章节编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 112\n *   get:\n *     description: 源站章节内容\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: 成功获取图书章节内容\n *         schema:\n *           type: object\n *           properties:\n *             content:\n *               type: string\n *             title:\n *               type: string\n *       400:\n *         description: 无法获取图书章节内容\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:source/:bookId/:chapterId', async (ctx, next) => {\n  try {\n    const chapter = await parserFactory(ctx.params.source).syncContent({ bookId: ctx.params.bookId, chapterId: ctx.params.chapterId });\n\n    ctx.status = 200;\n    ctx.body = {\n      ...chapter,\n    };\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n  }\n});\n\n/**\n * @swagger\n * /api/v1/books/{bookId}/comments:\n *   parameters:\n *     - name: bookId\n *       description: 书本编号\n *       in: path\n *       required: true\n *       type: integer\n *       x-example: 42\n *   get:\n *     description: 图书书评列表\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: pageIndex\n *         description: 开始索引\n *         in: query\n *         required: false\n *         type: integer\n *     responses:\n *       200:\n *         description: 成功获取图书书评\n *         schema:\n *           type: array\n *           items:\n *             $ref: '#/definitions/Comment'\n *       400:\n *         description: 无法获取图书书评\n *         schema:\n *           $ref: '#/definitions/BAD404'\n */\nBookApi.get('/:bookId/comments', async (ctx, next) => {\n  const { data, err } = await QidianClient.comments({\n    bookId: ctx.params.bookId,\n    pageIndex: ctx.query.pageIndex,\n  });\n\n  if (err) {\n    ctx.status = 400;\n    ctx.body = {\n      msg: err,\n    };\n    return;\n  }\n\n  ctx.status = 200;\n  ctx.body = data;\n});\n\n// /**\n//  * 开启解析\n//  */\n// BookApi.get('/:source/:bookId/sync', async (ctx, next) => {\n//   const result = await parserFactory(ctx.params.source).start({ bookId: ctx.params.bookId });\n\n//   if (!result) {\n//     ctx.status = 400;\n//     ctx.body = {\n//       msg: `同步书本${ctx.params.bookId}失败`,\n//     };\n//     return;\n//   }\n\n//   ctx.status = 200;\n//   ctx.body = {\n//     msg: `同步书本${ctx.params.bookId}成功`,\n//   };\n// });\n\nexport default BookApi;\n\n\n"]}